{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"in",
				"include"
			],
			[
				"thea",
				"thread_loop_delay"
			],
			[
				"con",
				"controller_loop_rate"
			],
			[
				"set",
				"setType"
			],
			[
				"Mo",
				"MotorHardware"
			],
			[
				"cont",
				"controlLoop"
			],
			[
				"ST",
				"START"
			],
			[
				"Serial",
				"serial"
			],
			[
				"ou",
				"out"
			],
			[
				"inp",
				"inputAvailable"
			],
			[
				"get",
				"getData"
			],
			[
				"ve",
				"velocity_command"
			],
			[
				"mo",
				"motor_serial_"
			],
			[
				"M",
				"MotorHardware"
			],
			[
				"if",
				"ifndef"
			],
			[
				"out",
				"output"
			],
			[
				"th",
				"throw"
			],
			[
				"c",
				"catch"
			],
			[
				"comm",
				"commandAvailable"
			],
			[
				"ver",
				"verifyType"
			],
			[
				"s",
				"serialize"
			],
			[
				"verify",
				"verifyRegister"
			],
			[
				"va",
				"valid_registers"
			],
			[
				"u",
				"uint8_t"
			],
			[
				"vali",
				"valid_types"
			],
			[
				"reg",
				"register_addr"
			],
			[
				"pro",
				"protocol_version"
			],
			[
				"se",
				"setRegister"
			],
			[
				"re",
				"return"
			],
			[
				"ger",
				"generateChecksum"
			],
			[
				"int",
				"int32_t"
			],
			[
				"typ",
				"Type"
			],
			[
				"MOR",
				"MotorCommand"
			],
			[
				"a",
				"addr"
			],
			[
				"ch",
				"checksum"
			],
			[
				"sel",
				"select_adc"
			],
			[
				"p",
				"println"
			]
		]
	},
	"buffers":
	[
		{
			"file": "test/motor_message_test.cc",
			"settings":
			{
				"buffer_size": 5897,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/motor_message.cc",
			"settings":
			{
				"buffer_size": 5649,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/**\nCopyright (c) 2015, Ubiquity Robotics\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of ubiquity_motor nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN AiiiiiiiiiiiNY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n**/\n#include <boost/assign.hpp>\n#include <ubiquity_motor/motor_hardware.h>\n#include <ubiquity_motor/motor_message.h>\n\n#include <boost/math/special_functions/round.hpp>\n\n//#define SENSOR_DISTANCE 0.002478\n\n// 60 tics per revolution of the motor (pre gearbox)\n//17.2328767123\n// gear ratio of 4.29411764706:1\n#define TICS_PER_RADIAN 41.0058030317\n\nMotorHardware::MotorHardware(ros::NodeHandle nh){\n	ros::V_string joint_names = boost::assign::list_of(\"left_wheel_joint\")(\"right_wheel_joint\");\n\n	for (unsigned int i = 0; i < joint_names.size(); i++) {\n		hardware_interface::JointStateHandle joint_state_handle(joint_names[i],\n		    &joints_[i].position, &joints_[i].velocity, &joints_[i].effort);\n		joint_state_interface_.registerHandle(joint_state_handle);\n\n		hardware_interface::JointHandle joint_handle(\n		    joint_state_handle, &joints_[i].velocity_command);\n		velocity_joint_interface_.registerHandle(joint_handle);\n	}\n	registerInterface(&joint_state_interface_);\n	registerInterface(&velocity_joint_interface_);\n\n\n\n	std::string sPort;\n	int sBaud;\n\n	double sLoopRate;\n\n	if (!n.getParam(\"ubiquity_motor/serial_port\", sPort))\n	{\n		sPort.assign(\"/dev/ttyS0\");\n		n.setParam(\"ubiquity_motor/serial_port\", sPort);\n	}\n\n	if (!n.getParam(\"ubiquity_motor/serial_baud\", sBaud))\n	{\n		sBaud = 9600;\n		n.setParam(\"ubiquity_motor/serial_baud\", sBaud);\n	}\n\n	if (!n.getParam(\"ubiquity_motor/serial_loop_rate\", sLoopRate))\n	{\n		sLoopRate = 100;\n		n.setParam(\"ubiquity_motor/serial_loop_rate\", sLoopRate);\n	}\n\n	motor_serial_ = new MotorSerial(sPort,sBaud,sLoopRate);\n}\n\nMotorHardware::~MotorHardware(){\n	delete motor_serial_;\n}\n\nvoid MotorHardware::readInputs(){\n	while(motor_serial_->commandAvailable()){\n		MotorMessage mm;\n		mm = motor_serial_-> receiveCommand();\n		if(mm.getType() == MotorMessage::TYPE_RESPONSE){\n			switch(mm.getRegister()){\n				case MotorMessage::REG_LEFT_ODOM:\n					joints_[0].position += mm.getData()/TICS_PER_RADIAN;\n					break;\n				case MotorMessage::REG_RIGHT_ODOM:\n					joints_[1].position += mm.getData()/TICS_PER_RADIAN;\n					break;\n			}\n		}\n	}\n}\n\nvoid MotorHardware::writeSpeeds(){\n	requestOdometry();\n	MotorMessage left;\n	left.setRegister(MotorMessage::REG_LEFT_SPEED_SET);\n	left.setType(MotorMessage::TYPE_WRITE);\n	left.setData(boost::math::lround(joints_[0].velocity_command*TICS_PER_RADIAN));\n	motor_serial_->transmitCommand(left);\n	MotorMessage right;\n	right.setRegister(MotorMessage::REG_RIGHT_SPEED_SET);\n	right.setType(MotorMessage::TYPE_WRITE);\n	right.setData(boost::math::lround(joints_[1].velocity_command*TICS_PER_RADIAN));\n	motor_serial_->transmitCommand(right);\n	// ROS_ERROR(\"velocity_command %f rad/s %f rad/s\", joints_[0].velocity_command, joints_[1].velocity_command);\n	// ROS_ERROR(\"SPEEDS %d %d\", left.getData(), right.getData());\n}\n\nvoid MotorHardware::requestOdometry(){\n	MotorMessage left;\n	left.setRegister(MotorMessage::REG_LEFT_ODOM);\n	left.setType(MotorMessage::TYPE_READ);\n	left.setData(0);\n	motor_serial_->transmitCommand(left);\n	MotorMessage right;\n	right.setRegister(MotorMessage::REG_RIGHT_ODOM);\n	right.setType(MotorMessage::TYPE_READ);\n	right.setData(0);\n	motor_serial_->transmitCommand(right);\n}",
			"file": "src/motor_hardware.cc",
			"file_size": 4636,
			"file_write_time": 130836439930358896,
			"settings":
			{
				"buffer_size": 4647,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 159.0,
		"last_filter": "git branc",
		"selected_items":
		[
			[
				"git branc",
				"Git: Change Branch"
			],
			[
				"git st",
				"Git: Status"
			],
			[
				":w",
				":w - Save"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git ad",
				"Git: Add Current File"
			],
			[
				"xml",
				"Set Syntax: XML"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git ",
				"Git: Status"
			],
			[
				"gi",
				"Git: Status"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"gti pull",
				"Git: Pull"
			],
			[
				"git s",
				"Git: Status"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"git p",
				"Git: Pull"
			],
			[
				"cmake",
				"Set Syntax: CMake"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"ins	",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/include",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/include/ubiquity_motor",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/src",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/test"
	],
	"file_history":
	[
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/test/motor_message_test.cc",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/src/motor_message.cc",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/src/motor_hardware.cc",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/include/ubiquity_motor/motor_message.h",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/include/ubiquity_motor/motor_command_registers.h",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/CHANGELOG.rst",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/test/motor_serial_test.cc",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/src/motor_serial.cc",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/include/ubiquity_motor/motor_serial.h",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/src/motor_node.cc",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/CMakeLists.txt",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/include/ubiquity_motor/motor_command.h",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/src/motor_command.cc",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/package.xml",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/include/ubiquity_motor/motor_hardware.h",
		"/home/rohan/indigo_catkin/src/ubiquity/magni-test.launch",
		"/home/rohan/indigo_catkin/src/ubiquity/basic_magni.urdf",
		"/home/rohan/indigo_catkin/src/ubiquity/magni.yaml",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/.travis.yml",
		"/home/rohan/.config/sublime-text-3/Packages/User/catkin.sublime-build",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/catkin.sublime-build",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/test/motor_command_test.cc",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/test/motor_test.cc",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/src/MotorCommand.cc",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/src/crc8.c",
		"/home/rohan/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/src/protocol.h",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/src/UbiquityMotor.cc",
		"/home/rohan/ubiquity/setup/app.js",
		"/home/rohan/ubiquity/setup/views/layout.jade",
		"/home/rohan/ubiquity/setup/package.json",
		"/home/rohan/Arduino/Spi_ADC_test/Spi_ADC_test.ino",
		"/home/rohan/Arduino/Easy_VR/Easy_VR.ino",
		"/home/rohan/Arduino/Spi_DAC_Test/Spi_DAC_Test.ino",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/include/ubiquity_motor/MotorDriver.h",
		"/home/rohan/indigo_catkin/src/ubiquity/ubiquity_motor/LICENSE",
		"/media/rohan/93b3892a-42e5-4de5-b76c-c3a9fd6d8999/home/rohan/justphone/JustPhoneFirmware/SPIPeripheralTest/SPIPeripheralTest.ino",
		"/home/rohan/Arduino/GSM_CALL/GSM_CALL.ino"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Command",
			"MotorCommand",
			"CommandTypes",
			"motor_command",
			"command",
			"motor_command",
			"const",
			"};\n",
			"d",
			"serialized",
			"loopDelay",
			"new",
			"~",
			"n",
			"motors.",
			"wri",
			"WriteAll",
			"jade"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Message",
			"MotorMessage",
			"motor_message",
			"motors->"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "test/motor_message_test.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5897,
						"regions":
						{
						},
						"selection":
						[
							[
								4138,
								4138
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/motor_message.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5649,
						"regions":
						{
						},
						"selection":
						[
							[
								5619,
								5619
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3070.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/motor_hardware.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4647,
						"regions":
						{
						},
						"selection":
						[
							[
								1486,
								1486
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Button_Call":
	{
		"height": 112.0
	},
	"output.Easy_VR":
	{
		"height": 165.0
	},
	"output.GSM_CALL":
	{
		"height": 226.0
	},
	"output.GSM_TEST":
	{
		"height": 154.0
	},
	"output.Spi_ADC_test":
	{
		"height": 112.0
	},
	"output.Spi_DAC_Test":
	{
		"height": 112.0
	},
	"output.exec":
	{
		"height": 267.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 112.0
	},
	"output.stino_log":
	{
		"height": 112.0
	},
	"pinned_build_system": "Packages/User/catkin.sublime-build",
	"project": "ubiquity_motor.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 250.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
